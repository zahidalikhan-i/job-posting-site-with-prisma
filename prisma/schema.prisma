// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../app/generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    jobs          Job[]           @relation("Postedjobs")
    applications  Application[]   
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

model Job {
    id           String        @id @default(cuid())
    tittle       String?
    company      String        
    location     String
    type         String
    description  String
    salary       String?
    postAt       DateTime      @default(now())
    postedBy     User          @relation("Postedjobs", fields: [postedById], references: [id])
    postedById   String
    applications Application[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Application {
    id     String @id @default(cuid())
    jobId  String
    userId String

    status    String   @default("Pending") // e.g., applied, interviewed, offered, rejected
    appliedAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id])
    job  Job  @relation(fields: [jobId], references: [id])
    @@unique([jobId, userId]) // Ensure a user can only apply once to a job

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
